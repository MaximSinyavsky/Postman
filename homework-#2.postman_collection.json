{
	"info": {
		"_postman_id": "b7bf7fa4-42a2-4acc-955e-ee15f68520f6",
		"name": "homework-#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31459488"
	},
	"item": [
		{
			"name": "EP-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm\r",
							"pm.test(\"Body have current string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP-2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"//var responseData = JSON.parse(responseBody);\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"manual request name eql response name\", function() {\r",
							"    pm.expect(responseData.name).to.eql(\"Maxim\")\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"manual request age eql response age\", function () { \r",
							"    pm.expect(responseData.age).to.eql(32)\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"manual request salary eql response salary\", function() {\r",
							"    pm.expect(responseData.salary).to.eql(100500)\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"var requestData = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request name eql response name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name)\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"request age eql response age\", function() {\r",
							"    pm.expect(responseData.age).to.eql(+requestData.age)\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"request salary eql response salary\", function() {\r",
							"    pm.expect(responseData.salary).to.eql(+requestData.salary)\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"request u_salary_1_5_year eql salary*4\", function(){ \r",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(requestData.salary*4)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maxim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP-3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"//var responseData = JSON.parse(responseBody);\r",
							"// 4. Спарсить request.\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"response name eql request name\", function() {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"response age eql request age\", function() {\r",
							"    pm.expect(responseData.age).to.eql(+requestData.age)\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"response salary eql request salary\", function() {\r",
							"    pm.expect(responseData.salary).to.eql(+requestData.salary)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\", function () {\r",
							"     pm.expect(responseData.family.pets.dog.name).to.exist;\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"     pm.expect(responseData.family.pets.dog.age).to.exist;\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dogs name is Luky\", function () {\r",
							"     pm.expect(responseData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dogs age eql 4\", function () {\r",
							"     pm.expect(responseData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Maxim&age=32&salary=100500",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maxim"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP-4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"//var responseData = JSON.parse(responseBody);\r",
							"// 4. Спарсить request.\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"response name eql request name\", function() {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"response age eql request age\", function() {\r",
							"    pm.expect(responseData.age).to.eql(+requestData.age)\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestData.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(responseData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Zero element of response salary eql request salary\", function () {\r",
							"     pm.expect(responseData.salary[0]).to.eql(+requestData.salary)\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"First element of response salary eql request salary*2\", function () {\r",
							"     pm.expect(responseData.salary[1]).to.eql(requestData.salary*2)\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Second element of response salary eql request salary*3\", function () {\r",
							"     pm.expect(responseData.salary[2]).to.eql(requestData.salary*3)\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", responseData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", responseData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", responseData.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i in responseData.salary){\r",
							"    console.log(responseData.salary[i])\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Maxim&age=32&salary=100500",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maxim"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP-5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // // 1. Вставить параметр salary из окружения в request\r",
							"// // //pm.request.addQueryParams(\"salary={{salary}}\");\r",
							"// requestData.name = pm.environment.get(\"name\")\r",
							"// // // 2. Вставить параметр age из окружения в age\r",
							"// // pm.request.addQueryParams(\"age={{age}}\");\r",
							"// pm.request.formdata(\"age={{age}}\");\r",
							"// // // 3. Вставить параметр name из окружения в name\r",
							"// // pm.request.addQueryParams(\"name={{name}}\");\r",
							"// pm.request.formdata(\"name={{name}}\");\r",
							"// // // 4. Отправить запрос."
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"// var responseData = JSON.parse(responseBody);\r",
							"// 7. Спарсить request.\r",
							"requestData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response json have start_qa_salary\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response json have qa_salary_after_6_months\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response json have qa_salary_after_12_months\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response json have qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response json have qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"response json have person\", function() {\r",
							"    pm.expect(responseData).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"response start_qa_salary eql request salary\", function() {\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(+requestData.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"response qa_salary_after_6_months eql request salary*2\", function() {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(requestData.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"response qa_salary_after_12_months eql request salary\", function() {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(requestData.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"response qa_salary_after_1.5_year eql request salary*3.3\", function() {\r",
							"    pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.eql(requestData.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"response qa_salary_after_3.5_years eql request salary*3.3\", function() {\r",
							"    pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(requestData.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"response u_name[1] equals request request salary\", function() {\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"response u_age equals request request age\", function() {\r",
							"    pm.expect(responseData.person.u_age).to.eql(+requestData.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"response u_salary_5_years equals request salary*4.2\", function(){\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(requestData.salary*4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in responseData.person){\r",
							"    console.log(i, responseData.person[i])\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maxim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// 2. Статус код 200\r",
					"pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72",
			"type": "string"
		},
		{
			"key": "port",
			"value": "5005",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Maxim",
			"type": "string"
		},
		{
			"key": "age",
			"value": "32",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "100500",
			"type": "string"
		},
		{
			"key": "body",
			"value": ""
		}
	]
}